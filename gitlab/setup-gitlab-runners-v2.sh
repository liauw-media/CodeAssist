#!/bin/bash
#
# GitLab Runner Setup Script v2.0
# Purpose: Install efficient GitLab runners with proper separation of concerns
#
# This creates 2 runners:
# 1. Runner-Docker: Multi-purpose Docker executor for builds/tests (concurrent=5)
# 2. Runner-Deploy: Shell executor for deployments (concurrent=1)
#
# Author: Generated by Claude Code
# License: MIT

set -e

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║   GitLab Multi-Runner Setup v2.0                      ║${NC}"
echo -e "${BLUE}║   Efficient runner architecture                       ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════╝${NC}"
echo ""

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}❌ Please run as root (sudo)${NC}"
    exit 1
fi

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${RED}❌ Docker is not installed. Please install Docker first.${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Docker detected${NC}"

# Check if GitLab Runner is installed
if ! command -v gitlab-runner &> /dev/null; then
    echo -e "${YELLOW}⚠️  GitLab Runner not found. Installing...${NC}"

    # Add GitLab repository
    curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | bash

    # Install GitLab Runner
    apt-get install gitlab-runner -y

    echo -e "${GREEN}✅ GitLab Runner installed${NC}"
else
    echo -e "${GREEN}✅ GitLab Runner detected${NC}"
fi

# Ensure gitlab-runner user is in docker group
usermod -aG docker gitlab-runner
echo -e "${GREEN}✅ Added gitlab-runner user to docker group${NC}"

echo ""
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}  Creating Runner Directories & Configurations${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo ""

# ============================================================================
# Runner 1: Docker (Multi-purpose)
# ============================================================================

echo -e "${YELLOW}📦 Setting up Runner-Docker (multi-purpose)...${NC}"

# Create directory structure
mkdir -p /opt/gitlab-runner-docker/config

# Create config.toml for Docker runner
cat > /opt/gitlab-runner-docker/config/config.toml <<EOF
concurrent = 5
check_interval = 0

[session_server]
  session_timeout = 1800

# Runner will be registered here by register-gitlab-runners.sh
# This file will be updated after registration
EOF

chmod 600 /opt/gitlab-runner-docker/config/config.toml
chown -R gitlab-runner:gitlab-runner /opt/gitlab-runner-docker

# Create systemd service for Docker runner
cat > /etc/systemd/system/gitlab-runner-docker.service <<EOF
[Unit]
Description=GitLab Runner - Docker (Multi-purpose Build & Test)
After=docker.service
Requires=docker.service
ConditionFileIsExecutable=/usr/bin/gitlab-runner

[Service]
Type=simple
User=gitlab-runner
Group=gitlab-runner
WorkingDirectory=/opt/gitlab-runner-docker
ExecStart=/usr/bin/gitlab-runner run --config=/opt/gitlab-runner-docker/config/config.toml --working-directory=/opt/gitlab-runner-docker
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

echo -e "${GREEN}✅ Runner-Docker configuration created${NC}"

# ============================================================================
# Runner 2: Deploy (Shell executor)
# ============================================================================

echo -e "${YELLOW}🚀 Setting up Runner-Deploy (deployment)...${NC}"

# Create directory structure
mkdir -p /opt/gitlab-runner-deploy/config

# Create config.toml for Deploy runner
cat > /opt/gitlab-runner-deploy/config/config.toml <<EOF
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

# Runner will be registered here by register-gitlab-runners.sh
# This file will be updated after registration
EOF

chmod 600 /opt/gitlab-runner-deploy/config/config.toml
chown -R gitlab-runner:gitlab-runner /opt/gitlab-runner-deploy

# Create systemd service for Deploy runner
cat > /etc/systemd/system/gitlab-runner-deploy.service <<EOF
[Unit]
Description=GitLab Runner - Deploy (Shell Executor for Deployments)
After=network.target
ConditionFileIsExecutable=/usr/bin/gitlab-runner

[Service]
Type=simple
User=gitlab-runner
Group=gitlab-runner
WorkingDirectory=/opt/gitlab-runner-deploy
ExecStart=/usr/bin/gitlab-runner run --config=/opt/gitlab-runner-deploy/config/config.toml --working-directory=/opt/gitlab-runner-deploy
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

echo -e "${GREEN}✅ Runner-Deploy configuration created${NC}"

# ============================================================================
# Create helper scripts
# ============================================================================

echo ""
echo -e "${YELLOW}📝 Creating helper scripts...${NC}"

# Registration script
cat > /opt/register-gitlab-runners.sh <<'EOF'
#!/bin/bash
#
# GitLab Runner Registration Script v2.0
# Registers runners with your GitLab instance
#

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║   GitLab Runner Registration                          ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════╝${NC}"
echo ""

# Get GitLab instance URL
read -p "Enter GitLab instance URL (e.g., https://gitlab.liauw-media.de): " GITLAB_URL

if [ -z "$GITLAB_URL" ]; then
    echo -e "${RED}❌ GitLab URL is required${NC}"
    exit 1
fi

echo ""
echo -e "${YELLOW}You can use the SAME registration token for both runners if you want${NC}"
echo -e "${YELLOW}them available to the same projects/groups.${NC}"
echo ""

# ============================================================================
# Configure Private Registry Authentication
# ============================================================================

echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}  Private Container Registry Authentication${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo ""
echo -e "GitLab provides automatic authentication via CI_REGISTRY variables."
echo -e "For GitLab Container Registry, runners will automatically authenticate"
echo -e "using CI_REGISTRY_PASSWORD during pipeline execution."
echo ""
echo -e "${YELLOW}Do you need to configure ADDITIONAL private registry credentials?${NC}"
echo -e "(GitLab registry is handled automatically via CI variables)"
read -p "Configure additional registry? (yes/no) [no]: " CONFIGURE_REGISTRY
CONFIGURE_REGISTRY=${CONFIGURE_REGISTRY:-no}

if [[ "$CONFIGURE_REGISTRY" =~ ^[Yy] ]]; then
    echo ""
    echo -e "${YELLOW}Enter registry credentials (or press Enter to skip):${NC}"
    read -p "Registry URL (e.g., registry.example.com): " REGISTRY_URL
    read -p "Registry Username: " REGISTRY_USER
    read -sp "Registry Password: " REGISTRY_PASS
    echo ""

    if [ -n "$REGISTRY_URL" ] && [ -n "$REGISTRY_USER" ] && [ -n "$REGISTRY_PASS" ]; then
        # Login as gitlab-runner user to store credentials
        echo ""
        echo -e "${YELLOW}Storing registry credentials for gitlab-runner user...${NC}"
        su - gitlab-runner -c "docker login $REGISTRY_URL -u $REGISTRY_USER -p $REGISTRY_PASS"

        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✅ Registry credentials configured${NC}"
        else
            echo -e "${RED}❌ Failed to configure registry credentials${NC}"
        fi
    fi
fi

# ============================================================================
# Register Runner-Docker
# ============================================================================

echo ""
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}  Registering Runner-Docker (Multi-purpose)${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo ""
echo -e "This runner handles:"
echo -e "  • Building Docker images"
echo -e "  • Running tests (PHP, Node, Python, Go, etc.)"
echo -e "  • Linting and code quality checks"
echo -e "  • Any job using Docker containers"
echo ""

read -p "Enter registration token for Runner-Docker: " TOKEN_DOCKER

if [ -z "$TOKEN_DOCKER" ]; then
    echo -e "${RED}❌ Registration token is required${NC}"
    exit 1
fi

gitlab-runner register \
  --non-interactive \
  --url "$GITLAB_URL" \
  --registration-token "$TOKEN_DOCKER" \
  --executor "docker" \
  --docker-image "alpine:latest" \
  --description "Runner-Docker (Multi-purpose Build & Test)" \
  --tag-list "docker,build,test,linux" \
  --run-untagged="false" \
  --locked="false" \
  --access-level="not_protected" \
  --docker-privileged="true" \
  --docker-volumes "/var/run/docker.sock:/var/run/docker.sock" \
  --docker-volumes "/cache" \
  --docker-pull-policy "if-not-present" \
  --config "/opt/gitlab-runner-docker/config/config.toml"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Runner-Docker registered successfully${NC}"
else
    echo -e "${RED}❌ Failed to register Runner-Docker${NC}"
    exit 1
fi

# ============================================================================
# Register Runner-Deploy
# ============================================================================

echo ""
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}  Registering Runner-Deploy (Shell Executor)${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo ""
echo -e "This runner handles:"
echo -e "  • Production deployments"
echo -e "  • Server provisioning"
echo -e "  • Direct shell access tasks"
echo ""

read -p "Enter registration token for Runner-Deploy (or press Enter to use same token): " TOKEN_DEPLOY

if [ -z "$TOKEN_DEPLOY" ]; then
    TOKEN_DEPLOY="$TOKEN_DOCKER"
    echo -e "${YELLOW}ℹ️  Using same token as Runner-Docker${NC}"
fi

gitlab-runner register \
  --non-interactive \
  --url "$GITLAB_URL" \
  --registration-token "$TOKEN_DEPLOY" \
  --executor "shell" \
  --description "Runner-Deploy (Shell for Deployments)" \
  --tag-list "deploy,shell,production" \
  --run-untagged="false" \
  --locked="false" \
  --access-level="not_protected" \
  --config "/opt/gitlab-runner-deploy/config/config.toml"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Runner-Deploy registered successfully${NC}"
else
    echo -e "${RED}❌ Failed to register Runner-Deploy${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║   ✅ All Runners Registered Successfully              ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "Verify in GitLab:"
echo -e "  ${GITLAB_URL}/admin/runners"
echo ""
echo -e "Start runners with:"
echo -e "  ${YELLOW}sudo /opt/manage-gitlab-runners.sh start${NC}"
echo ""
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}  GitLab Container Registry Authentication${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
echo ""
echo -e "${GREEN}GitLab automatically provides these CI variables:${NC}"
echo -e "  • \$CI_REGISTRY        - Registry URL"
echo -e "  • \$CI_REGISTRY_USER   - Username (gitlab-ci-token)"
echo -e "  • \$CI_REGISTRY_PASSWORD - Authentication token"
echo -e "  • \$CI_REGISTRY_IMAGE  - Your project's image path"
echo ""
echo -e "${YELLOW}Example .gitlab-ci.yml for private registry:${NC}"
echo -e ""
cat << 'EXAMPLE'
build:
  stage: build
  tags:
    - docker
  image: docker:latest
  services:
    - docker:dind
  before_script:
    # Automatic GitLab registry authentication
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

test:
  stage: test
  tags:
    - docker
  # Pull from your private registry
  image: registry.gitlab.com/your-group/your-project/base-image:latest
  before_script:
    # Already authenticated by GitLab!
    - echo "Using private image from GitLab registry"
  script:
    - npm test
EXAMPLE
echo ""
EOF

chmod +x /opt/register-gitlab-runners.sh

# Management script
cat > /opt/manage-gitlab-runners.sh <<'EOF'
#!/bin/bash
#
# GitLab Runner Management Script v2.0
# Manage all GitLab runners from one place
#

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

RUNNERS=("docker" "deploy")

show_usage() {
    echo -e "${BLUE}GitLab Runner Management${NC}"
    echo ""
    echo "Usage: $0 {status|start|stop|restart|logs} [runner-name]"
    echo ""
    echo "Commands:"
    echo "  status          - Show status of all runners"
    echo "  start           - Start all runners"
    echo "  stop            - Stop all runners"
    echo "  restart         - Restart all runners"
    echo "  logs [runner]   - Show logs for specific runner"
    echo ""
    echo "Runners:"
    echo "  docker          - Multi-purpose Docker runner"
    echo "  deploy          - Deployment shell runner"
    echo ""
    echo "Examples:"
    echo "  $0 status"
    echo "  $0 logs docker"
    echo "  $0 restart"
    echo ""
}

status_all() {
    echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}  GitLab Runners Status${NC}"
    echo -e "${BLUE}═══════════════════════════════════════════════════════${NC}"
    echo ""

    for runner in "${RUNNERS[@]}"; do
        echo -e "${YELLOW}Runner: $runner${NC}"
        systemctl status gitlab-runner-$runner --no-pager -l
        echo ""
    done
}

start_all() {
    echo -e "${BLUE}Starting all GitLab runners...${NC}"
    for runner in "${RUNNERS[@]}"; do
        systemctl start gitlab-runner-$runner
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✅ Runner-$runner started${NC}"
        else
            echo -e "${RED}❌ Failed to start Runner-$runner${NC}"
        fi
    done
}

stop_all() {
    echo -e "${BLUE}Stopping all GitLab runners...${NC}"
    for runner in "${RUNNERS[@]}"; do
        systemctl stop gitlab-runner-$runner
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✅ Runner-$runner stopped${NC}"
        else
            echo -e "${RED}❌ Failed to stop Runner-$runner${NC}"
        fi
    done
}

restart_all() {
    echo -e "${BLUE}Restarting all GitLab runners...${NC}"
    for runner in "${RUNNERS[@]}"; do
        systemctl restart gitlab-runner-$runner
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✅ Runner-$runner restarted${NC}"
        else
            echo -e "${RED}❌ Failed to restart Runner-$runner${NC}"
        fi
    done
}

show_logs() {
    local runner=$1

    if [ -z "$runner" ]; then
        echo -e "${RED}❌ Please specify runner name${NC}"
        echo -e "Available runners: ${RUNNERS[*]}"
        exit 1
    fi

    if [[ ! " ${RUNNERS[@]} " =~ " ${runner} " ]]; then
        echo -e "${RED}❌ Unknown runner: $runner${NC}"
        echo -e "Available runners: ${RUNNERS[*]}"
        exit 1
    fi

    echo -e "${BLUE}Showing logs for Runner-$runner (Ctrl+C to exit)${NC}"
    echo ""
    journalctl -u gitlab-runner-$runner -f
}

# Main command handler
case "$1" in
    status)
        status_all
        ;;
    start)
        start_all
        ;;
    stop)
        stop_all
        ;;
    restart)
        restart_all
        ;;
    logs)
        show_logs "$2"
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
EOF

chmod +x /opt/manage-gitlab-runners.sh

echo -e "${GREEN}✅ Helper scripts created${NC}"

# ============================================================================
# Reload systemd and enable services
# ============================================================================

echo ""
echo -e "${YELLOW}🔄 Reloading systemd and enabling services...${NC}"

systemctl daemon-reload

systemctl enable gitlab-runner-docker
systemctl enable gitlab-runner-deploy

echo -e "${GREEN}✅ Services enabled${NC}"

# ============================================================================
# Final summary
# ============================================================================

echo ""
echo -e "${GREEN}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║   ✅ GitLab Runners Setup Complete!                   ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${BLUE}Runners created:${NC}"
echo -e "  ${GREEN}✅${NC} Runner-Docker  - Multi-purpose (concurrent=5)"
echo -e "  ${GREEN}✅${NC} Runner-Deploy  - Deployments (concurrent=1)"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo -e "  1. Register runners:"
echo -e "     ${BLUE}sudo /opt/register-gitlab-runners.sh${NC}"
echo ""
echo -e "  2. Start runners:"
echo -e "     ${BLUE}sudo /opt/manage-gitlab-runners.sh start${NC}"
echo ""
echo -e "  3. Verify in GitLab:"
echo -e "     ${BLUE}https://your-gitlab.com/admin/runners${NC}"
echo ""
echo -e "${YELLOW}Management commands:${NC}"
echo -e "  ${BLUE}sudo /opt/manage-gitlab-runners.sh status${NC}   - Check status"
echo -e "  ${BLUE}sudo /opt/manage-gitlab-runners.sh logs docker${NC} - View logs"
echo -e "  ${BLUE}sudo /opt/manage-gitlab-runners.sh restart${NC}  - Restart all"
echo ""
echo -e "${YELLOW}Configuration files:${NC}"
echo -e "  /opt/gitlab-runner-docker/config/config.toml"
echo -e "  /opt/gitlab-runner-deploy/config/config.toml"
echo ""
echo -e "${YELLOW}Systemd services:${NC}"
echo -e "  gitlab-runner-docker.service"
echo -e "  gitlab-runner-deploy.service"
echo ""
echo -e "${GREEN}Setup complete! 🎉${NC}"
echo ""
